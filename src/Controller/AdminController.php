<?php
/**
 * Created by PhpStorm.
 * User: Etudiant
 * Date: 07/03/2018
 * Time: 10:20
 */

namespace App\Controller ;
use App\Entity\Photo;
use App\Entity\Contact;
use App\Form\PhotoType;
use App\Form\ContactType;


use Doctrine\DBAL\Connection;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;


class AdminController extends Controller
{
    //connection BDD
    public function admin(Connection $db)
    {
        $photos = $db->fetchAll('SELECT * from photo');
        return $this->render('admin.html.twig', [
            'photo' => $photos
        ]);
    }


    //fonction d'insertion d'image dans le slider
    public function insertPhoto(Request $request)
    {

        $photo = new Photo();
        //creation du formulaire d'ajout
        $form = $this->createFormBuilder($photo)
            ->add('titre', TextType::class, [
                'required'  => true,
                'label'     => 'Titre: ',
                'attr'      => [
                    'name'  => 'libelle',
                    'class' => 'form-control' ,
                    'placeholder' => 'titre'
                ]
            ])

            ->add('description', TextType::class, [
                'required'  => true,
                'label'     => 'Titre: ',
                'attr'      => [
                    'name'  => 'libelle',
                    'class' => 'form-control' ,
                    'placeholder' => 'description'
                ]
            ])

            ->add('image', FileType::class, [
                'required'   => true ,
                'label'     => 'Importer un fichier: ' ,
                'attr'     => [
                    'name'  => 'image',
                    'class'   => 'dropify form-inline'
                ]
            ])


            //génère formulaire
            ->getForm();

        $form->handleRequest($request);
        //insertion dans la BDD, lorsque l'on submit le formulaire
        if ($form->isSubmitted()) {
            $entityManager = $this->getDoctrine()->getManager();
            $photo = $form->getData();
            $file = $photo->getImage();
            //generation d'un nom unique à l'image
            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
            // deplacement du fichier récupéré (image) dans un dossier.
            $file->move(
                '../public/images/',
                $fileName);
            //changement du nom de l'image
            $photo->setImage('images/'.$fileName);
            $entityManager->persist($photo);
            $entityManager->flush();
        }

        //afficher toutes les images
        $repository = $this->getDoctrine()->getRepository(Photo::class);
        $products = $repository->findAll();

        return $this->render('admin/photo/ajouter.html.twig',[
            'form' =>$form->createView(), 'product' =>$products,
        ]);
    }

    //fonction supprimer
    public function deletePhoto($id)
    {
        //recupération var requete
        $request = Request::createFromGlobals();
        //connection BDD, recupération ID
        $entityManager = $this->getDoctrine()->getManager();
        $product = $entityManager->getRepository(Photo::class)->find($id);

        //suppression egalement du dossier
        unlink($product->getImage());
        $entityManager->remove($product);
        $entityManager->flush();
        return $this->redirect('../ajouter');
    }


    //Fonction de génération de nom unique pour l'image
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function contact()
    {
        $request = Request::createFromGlobals();
        $entityManager = $this->getDoctrine()->getManager();

        $id= 1;
        $contact = $entityManager->getRepository(Contact::class)->find($id);

        //creation du formulaire
        $form = $this->createForm(ContactType::class, $contact);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager->persist($contact);
            $entityManager->flush();
        }

        return $this->render('admin/contact/modifier.html.twig',[
            'form' =>$form->createView(),'contact' =>$contact,
        ]);
    }


}
